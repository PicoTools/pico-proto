syntax = "proto3";

package operator.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "common/v1/common.proto";

option go_package = "github.com/PicoTools/pico-shared/proto/gen/operator/v1;operatorv1";

service OperatorService {
  // Initial handshake to provide operator's cookie. If this stream
  // will be interrupted by operator - all subscriptions on another
  // streams will be interrupted. If operator has already subscribed on
  // this stream - new connection with same username will be dropped.
  rpc Hello ( HelloRequest ) returns ( stream HelloResponse );

  // Subscription for gathering listeners information with runtime updates
  rpc SubscribeListeners ( SubscribeListenersRequest ) returns ( stream SubscribeListenersResponse );

  // Subscription for gathering agents information with runtime updates
  rpc SubscribeAgents ( SubscribeAgentsRequest ) returns ( stream SubscribeAgentsResponse );

  // Subscription for gathering operators information with runtime updates
  rpc SubscribeOperators ( SubscribeOperatorsRequest ) returns ( stream SubscribeOperatorsResponse );

  // Subscription for gathering chat's messages information with runtime updates
  rpc SubscribeChat ( SubscribeChatRequest ) returns ( stream SubscribeChatResponse );

  // Subscription for gathering credentials information with runtime updates
  rpc SubscribeCredentials ( SubscribeCredentialsRequest ) returns ( stream SubscribeCredentialsResponse );

  // Subscription for gathering agent's supplying tasks information with runtime updates
  rpc SubscribeTasks ( stream SubscribeTasksRequest ) returns ( stream SubscribeTasksResponse );

  // Update color on listener
  rpc SetListenerColor ( SetListenerColorRequest ) returns ( SetListenerColorResponse );

  // Update color on list of listeners
  rpc SetListenersColor ( SetListenersColorRequest ) returns ( SetListenersColorResponse );

  // Update note on listener
  rpc SetListenerNote ( SetListenerNoteRequest ) returns ( SetListenerNoteResponse );

  // Update note on list of listeners
  rpc SetListenersNote ( SetListenersNoteRequest ) returns ( SetListenersNoteResponse );

  // Update color on agent
  rpc SetAgentColor ( SetAgentColorRequest ) returns ( SetAgentColorResponse );

  // Update color on list of agents
  rpc SetAgentsColor ( SetAgentsColorRequest ) returns ( SetAgentsColorResponse );

  // Update note on agent
  rpc SetAgentNote ( SetAgentNoteRequest ) returns ( SetAgentNoteResponse );

  // Update note on list of agents
  rpc SetAgentsNote ( SetAgentsNoteRequest ) returns ( SetAgentsNoteResponse );

  // Update color on operator
  rpc SetOperatorColor ( SetOperatorColorRequest ) returns ( SetOperatorColorResponse );

  // Update color on list of operators
  rpc SetOperatorsColor ( SetOperatorsColorRequest ) returns ( SetOperatorsColorResponse );

  // Create new message in chat
  rpc NewChatMessage ( NewChatMessageRequest ) returns ( NewChatMessageResponse );

  // Create new credential
  rpc NewCredential ( NewCredentialRequest ) returns ( NewCredentialResponse );

  // Update color on credential
  rpc SetCredentialColor ( SetCredentialColorRequest ) returns ( SetCredentialColorResponse );

  // Update color on list of credentials
  rpc SetCredentialsColor ( SetCredentialsColorRequest ) returns ( SetCredentialsColorResponse );

  // Update note on credential
  rpc SetCredentialNote ( SetCredentialNoteRequest ) returns ( SetCredentialNoteResponse );

  // Update note on list of credentials
  rpc SetCredentialsNote ( SetCredentialsNoteRequest ) returns ( SetCredentialsNoteResponse );

  // Create new command for merging tasks and messages in
  rpc NewCommand ( stream NewCommandRequest ) returns ( NewCommandResponse );

  // Cancel all tasks in queue created by operator and located in status "NEW"
  rpc CancelTasks ( CancelTasksRequest ) returns ( CancelTasksResponse );

  // Get direct task's output. Used to get task's big output
  rpc GetTaskOutput ( GetTaskOutputRequest ) returns ( GetTaskOutputResponse );
}


// Message to transfer session cookie
message SessionCookie {
  // [MANDATORY] value of session cookie
  string value = 1;
}


// --> CancelTasks
message CancelTasksRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] Agent's ID
  uint32 id = 2;
}
message CancelTasksResponse {}
// <-- CancelTasks


// --> SetCredentialsNote
message SetCredentialsNoteRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] List of credential's IDs
  repeated int64 ids = 2;
  // [MANDATORY] Note to set on list of credentials
  string note = 3;
}
message SetCredentialsNoteResponse {}
// <-- SetCredentialsNote


// --> SetCredentialNote
message SetCredentialNoteRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] Credential's ID
  int64 id = 2;
  // [MANDATORY] Note to set on credential
  string note = 3;
}
message SetCredentialNoteResponse {}
// <-- SetCredentialNote


// --> SetCredentialsColor
message SetCredentialsColorRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] List of credential's IDs
  repeated int64 ids = 2;
  // [MANDATORY] Color to set on list of credentials
  google.protobuf.UInt32Value color = 3;
}
message SetCredentialsColorResponse {}
// <-- SetCredentialsColor


// --> SetCredentialColor
message SetCredentialColorRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] Credential's ID
  int64 id = 2;
  // [MANDATORY] Color to set on credential
  google.protobuf.UInt32Value color = 3;
}
message SetCredentialColorResponse {}
// <-- SetCredentialColor


// --> NewCredential
message NewCredentialRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // Username
  google.protobuf.StringValue username = 2;
  // Password
  google.protobuf.StringValue password = 3;
  // Realm
  google.protobuf.StringValue realm = 4;
  // Host
  google.protobuf.StringValue host = 5;
}
message NewCredentialResponse {}
// <-- NewCredential


// --> NewChatMessage
message NewChatMessageRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] Message in chat
  string message = 2;
}
message NewChatMessageResponse {}
// <-- NewChatMessage


// --> SetOperatorsColor
message SetOperatorsColorRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] List of operator's usernames
  repeated string usernames = 2;
  // [MANDATORY] Color to set on list of operators
  google.protobuf.UInt32Value color = 3;
}
message SetOperatorsColorResponse {}
// <-- SetOperatorsColor


// --> SetOperatorColor
message SetOperatorColorRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] Operator's username
  string username = 2;
  // [MANDATORY] Color to set on operator
  google.protobuf.UInt32Value color = 3;
}
message SetOperatorColorResponse {}
// <-- SetOperatorColor


// --> SetListenerNote
message SetListenerNoteRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] Listener's ID
  int64 id = 2;
  // [MANDATORY] Note to set on listener
  string note = 3;
}
message SetListenerNoteResponse {}
// <-- SetListenerNote


// --> SetAgentsNote
message SetAgentsNoteRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] List of agent's IDs
  repeated uint32 ids = 2;
  // [MANDATORY] Note to set on list of agents
  string note = 3;
}
message SetAgentsNoteResponse {}
// <-- SetAgentsNote


// --> SetAgentNote
message SetAgentNoteRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] Agent's ID
  uint32 id = 2;
  // [MANDATORY] Note to set on agent
  string note = 3;
}
message SetAgentNoteResponse {}
// <-- SetAgentNote


// --> SetAgentsColor
message SetAgentsColorRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] List of agent's IDs
  repeated uint32 ids = 2;
  // [MANDATORY] Color to set on list of agents
  google.protobuf.UInt32Value color = 3;
}
message SetAgentsColorResponse {}
// <-- SetAgentsColor


// --> SetAgentColor
message SetAgentColorRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] Agent's ID
  uint32 id = 2;
  // [MANDATORY] Color to set on agent
  google.protobuf.UInt32Value color = 3;
}
message SetAgentColorResponse {}
// <-- SetAgentColor


// --> SetListenersNote
message SetListenersNoteRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] List of listener's IDs
  repeated int64 ids = 2;
  // [MANDATORY] Not to set on list of agents
  string note = 3;
}
message SetListenersNoteResponse {}
// <-- SetListenersNote


// --> SetListenersColor
message SetListenersColorRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] List of listener's IDs
  repeated int64 ids = 2;
  // [MANDATORY] Color to set on list of listeners
  google.protobuf.UInt32Value color = 3;
}
message SetListenersColorResponse {}
// <-- SetListenersColor


// --> SetListenerColor
message SetListenerColorRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] Listener's ID
  int64 id = 2;
  // [MANDATORY] Color to set on listener
  google.protobuf.UInt32Value color = 3;
}
message SetListenerColorResponse {}
// <-- SetListenerColor


// --> Hello
message HelloRequest {
  // [MANDATORY] Operator's client version
  string version = 1;
}
// Message with handshake data from server
message HandshakeResponse {
  // [MANDATORY] Operator's username
  string username = 1;
  // [MANDATORY] Current server's timestamp
  google.protobuf.Timestamp time = 2;
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 3;
}
message HelloResponse {
  oneof response {
    HandshakeResponse handshake = 1;
    google.protobuf.Empty empty = 2;
  }
}
// <-- Hello


// --> SubscribeListeners
message SubscribeListenersRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
}
message ListenerResponse {
  // [MANDATORY] Listener's ID
  int64 id = 1;
  // Name of listener. Can be string with maximum length of 256
  google.protobuf.StringValue name = 2;
  // IP address which used to serving agent's server
  google.protobuf.StringValue ip = 3;
  // Port which used to serving agent's server
  google.protobuf.UInt32Value port = 4;
  // Color of listener
  google.protobuf.UInt32Value color = 5;
  // Note of listener
  google.protobuf.StringValue note = 6;
  // Last checkout timestamp
  google.protobuf.Timestamp last = 7;
}
message ListenersResponse {
  repeated ListenerResponse listeners = 1;
}
message ListenerColorResponse {
  // [MANDATORY] Listener's ID
  int64 id = 1;
  // New color of listener
  google.protobuf.UInt32Value color = 2;
}
message ListenerNoteResponse {
  // [MANDATORY] Listener's ID
  int64 id = 1;
  // New note on listener
  google.protobuf.StringValue note = 2;
}
message ListenerInfoResponse {
  // [MANDATORY] Listener's ID
  int64 id = 1;
  // Name of listener. Can be string with maximum length of 256
  google.protobuf.StringValue name = 2;
  // IP address which used to serving agent's server
  google.protobuf.StringValue ip = 3;
  // Port which used to serving agent's server
  google.protobuf.UInt32Value port = 4;
}
message ListenerLastResponse {
  // [MANDATORY] Listener's ID
  int64 id = 1;
  // Last checkout timestamp
  google.protobuf.Timestamp last = 2;
}
message SubscribeListenersResponse {
  oneof response {
    ListenerResponse listener = 1;
    ListenersResponse listeners = 2;
    ListenerColorResponse color = 3;
    ListenerNoteResponse note = 4;
    ListenerInfoResponse info = 5;
    ListenerLastResponse last = 6;
  }
}
// <-- SubscribeListeners


// --> SubscribeAgents
message SubscribeAgentsRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
}
message AgentResponse {
  // [MANDATORY] Agent's ID
  uint32 id = 1;
  // [MANDATORY] Listener's ID
  int64 lid = 2;
  // External IP address of agent
  google.protobuf.StringValue ext_ip = 3;
  // Internal IP address of agent
  google.protobuf.StringValue int_ip = 4;
  // [MANDATORY] Operating system type
  uint32 os = 5;
  // Operating system meta information (for example kernel version)
  google.protobuf.StringValue os_meta = 6;
  // Hostname of compromised target
  google.protobuf.StringValue hostname = 7;
  // Username under which agent's process is working
  google.protobuf.StringValue username = 8;
  // Domain name of compromised target
  google.protobuf.StringValue domain = 9;
  // Is process privilged (root, high intergity, etc)
  google.protobuf.BoolValue privileged = 10;
  // Name of agent's process
  google.protobuf.StringValue proc_name = 11;
  // Agent's process ID
  google.protobuf.UInt64Value pid = 12;
  // [MANDATORY] Process architecture
  uint32 arch = 13;
  // [MANDATORY] Sleep value of agent's process (in seconds)
  uint32 sleep = 14;
  // [MANDATORY] Jitter value of agent's process (in range 1-99)
  uint32 jitter = 15;
  // [MANDATORY] Binary mask represented supported agent's capabilities
  uint32 caps = 16;
  // Color of agent
  google.protobuf.UInt32Value color = 17;
  // Note of agent
  google.protobuf.StringValue note = 18;
  // First checkout timestamp
  google.protobuf.Timestamp first = 19;
  // Last checkout timestamp
  google.protobuf.Timestamp last = 20;
}
message AgentsResponse {
  // List of agents
  repeated AgentResponse agents = 1;
}
message AgentColorResponse {
  // [MANDATORY] Agent's ID
  uint32 id = 1;
  // New color of agent
  google.protobuf.UInt32Value color = 2;
}
message AgentNoteResponse {
  // [MANDATORY] Agent's ID
  uint32 id = 1;
  // New note of agent
  google.protobuf.StringValue note = 2;
}
message AgentLastResponse {
  // [MANDATORY] Agent's ID
  uint32 id = 1;
  // Updated last checkout timestamp
  google.protobuf.Timestamp last = 2;
}
message AgentSleepResponse {
  // [MANDATORY] Agent's ID
  uint32 id = 1;
  // [MANDATORY] Updated sleep value of agent
  uint32 sleep = 2;
  // [MANDATORY] Updated jitter value of agent
  uint32 jitter = 3;
}
message SubscribeAgentsResponse {
  oneof response {
    AgentResponse agent = 1;
    AgentsResponse agents = 2;
    AgentColorResponse color = 3;
    AgentNoteResponse note = 4;
    AgentLastResponse last = 5;
    AgentSleepResponse sleep = 6;
  }
}
// <-- SubscribeAgents


// --> SubscribeOperators
message SubscribeOperatorsRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
}
message OperatorResponse {
  // [MANDATORY] Operator's username
  string username = 1;
  // Color of operator
  google.protobuf.UInt32Value color = 2;
  // Last checkout timestamp
  google.protobuf.Timestamp last = 4;
}
message OperatorsResponse {
  // List of operators
  repeated OperatorResponse operators = 1;
}
message OperatorLastResponse {
  // [MANDATORY] Operator's username
  string username = 1;
  // Last checkout timestamp
  google.protobuf.Timestamp last = 2;
}
message OperatorColorResponse {
  // [MANDATORY] Operator's username
  string username = 1;
  // New color of operator
  google.protobuf.UInt32Value color = 2;
}
message SubscribeOperatorsResponse {
  oneof response {
    OperatorResponse operator = 1;
    OperatorLastResponse last = 2;
    OperatorColorResponse color = 3;
    OperatorsResponse operators = 4;
  }
}
// <-- SubscribeOperators


// --> SubscribeChat
message SubscribeChatRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
}
message ChatResponse {
  // [MANDATORY] Timestamp of message creation
  google.protobuf.Timestamp created_at = 1;
  // Author of message
  google.protobuf.StringValue from = 2;
  // [MANDATORY] Message body
  string message = 3;
  // [MANDATORY] Is message created by server
  bool is_server = 4;
}
message ChatMessagesResponse {
  // List of messages in chat
  repeated ChatResponse messages = 1;
}
message SubscribeChatResponse {
  oneof response {
    ChatResponse message = 1;
    ChatMessagesResponse messages = 2;
  }
}
// <-- SubscribeChat


// --> SubscribeCredentials
message SubscribeCredentialsRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
}
message CredentialResponse {
  // [MANDATORY] Credential's ID
  int64 id = 1;
  // Username
  google.protobuf.StringValue username = 2;
  // Password
  google.protobuf.StringValue password = 3;
  // Realm
  google.protobuf.StringValue realm = 4;
  // Host
  google.protobuf.StringValue host = 5;
  // Timestamp of credential's creation
  google.protobuf.Timestamp created_at = 6;
  // Note on credential
  google.protobuf.StringValue note = 7;
  // Note on color
  google.protobuf.UInt32Value color = 8;
}
message CredentialsResponse {
  // List of credentials
  repeated CredentialResponse credentials = 1;
}
message CredentialColorResponse {
  // [MANDATORY] Credential's ID
  int64 id = 1;
  // New credential's color
  google.protobuf.UInt32Value color = 2;
}
message CredentialNoteResponse {
  // [MANDATORY] Credential's ID
  int64 id = 1;
  // New credential's note
  google.protobuf.StringValue note = 2;
}
message SubscribeCredentialsResponse {
  oneof response {
    CredentialResponse credential = 1;
    CredentialsResponse credentials = 2;
    CredentialColorResponse color = 3;
    CredentialNoteResponse note = 4;
  }
}
// <-- SubscribeCredentials


// --> NewCommand
message NewCommandRequest {
  // Operator's session cookie
  SessionCookie cookie = 1;
  oneof type {
    CreateCommandRequest command = 2;
    CreateMessageRequest message = 3;
    CreateTaskRequest task = 4;
  };
}
message CreateCommandRequest {
  // [MANDATORY] Agent's ID
  uint32 id = 1;
  // [MANDATORY] String with command
  string cmd = 2;
  // [MANDATORY] Is command visible for other operators
  bool visible = 3;
}
message CreateMessageRequest {
  // [MANDATORY] Message type
  uint32 type = 1;
  // [MANDATORY] Message body
  string msg = 2;
}
message CreateTaskRequest {
  // [MANDATORY] Capability value
  uint32 cap = 1;
  oneof args {
    common.v1.CapSleep sleep = 2;
    common.v1.CapLs ls = 3;
    common.v1.CapPwd pwd = 4;
    common.v1.CapCd cd = 5;
    common.v1.CapWhoami whoami = 6;
    common.v1.CapPs ps = 7;
    common.v1.CapCat cat = 8;
    common.v1.CapExec exec = 9;
    common.v1.CapCp cp = 10;
    common.v1.CapJobs jobs = 11;
    common.v1.CapJobkill jobkill = 12;
    common.v1.CapKill kill = 13;
    common.v1.CapMv mv = 14;
    common.v1.CapMkdir mkdir = 15;
    common.v1.CapRm rm = 16;
    common.v1.CapExecAssembly exec_assembly = 17;
    common.v1.CapShellcodeInjection shellcode_injection = 18;
    common.v1.CapDownload download = 19;
    common.v1.CapUpload upload = 20;
    common.v1.CapPause pause = 21;
    common.v1.CapDestroy destroy = 22;
    common.v1.CapExecDetach exec_detach = 23;
    common.v1.CapShell shell = 24;
    common.v1.CapPpid ppid = 25;
    common.v1.CapExit exit = 26;
  };
}
message NewCommandResponse {}
// <-- NewCommand


// --> SubscribeTasks
message SubscribeTasksRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  oneof type {
    SubscribeTasksHelloRequest hello = 2;
    StartPollAgentRequest start = 3;
    StopPollAgentRequest stop = 4;
  };
}
message SubscribeTasksHelloRequest {}
message StartPollAgentRequest {
  // [MANDATORY] Agent's ID
  uint32 id = 1;
}
message StopPollAgentRequest {
  // [MANDATORY] Agent's ID
  uint32 id = 1;
}
message CommandResponse {
  // [MANDATORY] Command ID
  int64 id = 1;
  // [MANDATORY] Agent's ID
  uint32 aid = 2;
  // [MANDATORY] String with command
  string cmd = 3;
  // [MANDATORY] Author of comman
  string author = 4;
  // [MANDATORY] Is comman visible for another operators
  bool visible = 5;
  // [MANDATORY] Timestamp of command creation
  google.protobuf.Timestamp created = 6;
}
message MessageResponse {
  // [MANDATORY] Command ID
  int64 id = 1;
  // [MANDATORY] Message ID
  int64 mid = 2;
  // [MANDATORY] Agent's ID
  uint32 aid = 3;
  // [MANDATORY] Type of message
  uint32 type = 4;
  // [MANDATORY] Body of message
  string message = 5;
  // [MANDATORY] Timestamp of message creation
  google.protobuf.Timestamp created = 6;
}
message TaskResponse {
  // [MANDATORY] Command ID
  int64 id = 1;
  // [MANDATORY] Task ID
  int64 tid = 2;
  // [MANDATORY] Agent's ID
  uint32 aid = 3;
  // [MANDATORY] Status of task
  uint32 status = 4;
  // Task's output blob
  google.protobuf.BytesValue output = 5;
  // [MANDATORY] Length of output blob
  uint64 output_len = 6;
  // [MANDATORY] Is output blob big
  bool output_big = 7;
  // [MANDATORY] Timestamp of task creation
  google.protobuf.Timestamp created = 8;
}
message TaskStatusResponse {
  // [MANDATORY] Command ID
  int64 id = 1;
  // [MANDATORY] Task ID
  int64 tid = 2;
  // [MANDATORY] Agent's ID
  uint32 aid = 3;
  // [MANDATORY] Status of task
  uint32 status = 4;
}
message TaskDoneResponse {
  // [MANDATORY] Command ID
  int64 id = 1;
  // [MANDATORY] Task ID
  int64 tid = 2;
  // [MANDATORY] Agent's ID
  uint32 aid = 3;
  // [MANDATORY] Status of task
  uint32 status = 4;
  // Task's output blob
  google.protobuf.BytesValue output = 5;
  // [MANDATORY] Length of output blob
  uint64 output_len = 6;
  // [MANDATORY] Is output blob big
  bool output_big = 7;
}
message SubscribeTasksResponse {
  oneof type {
    CommandResponse command = 1;
    MessageResponse message = 2;
    TaskResponse task = 3;
    TaskStatusResponse task_status = 4;
    TaskDoneResponse task_done = 5;
  };
}
// <-- SubscribeTasks


// --> GetTaskOutput
message GetTaskOutputRequest {
  // [MANDATORY] Operator's session cookie
  SessionCookie cookie = 1;
  // [MANDATORY] Task ID
  int64 id = 2;
}
message GetTaskOutputResponse {
  // Task's output blob
  google.protobuf.BytesValue output = 1;
  // [MANDATORY] Length of output blob
  uint64 output_len = 6;
}
// <-- GetTaskOutput
